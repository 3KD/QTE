{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QTE \u2014 Quantum Series Encoder","text":"<p>Polylog AC (auto/mp/series), Bessel (J_n), QFT labels with <code>[rail]</code>, Maclaurin helpers, caching, CLI.</p>"},{"location":"#quick-start","title":"Quick start","text":"<p>```bash pip install -r requirements.txt ./qte_cli.py --nq 6 --mode terms --label 'QFT[sin(2pix); N=64; a=0; b=1; ifft][rail]' ./qte_cli.py --value --label 'polylog(2, 1.1)'</p>"},{"location":"cli/","title":"CLI","text":"<p>Run help:</p> <pre><code>./qte_cli.py --help\n</code></pre>"},{"location":"cli/#examples","title":"Examples","text":"<p>Value mode (polylog continuation, auto backend):</p> <pre><code>QTE_POLYLOG_BACKEND=auto ./qte_cli.py --value --label \"polylog(2, 1.1)\"\n</code></pre> <p>QFT with rail mapping (normalized 64-vector):</p> <pre><code>./qte_cli.py --nq 6 --mode terms --label \"QFT[sin(2*pi*x); N=64; a=0; b=1; ifft][rail]\"\n</code></pre> <p>Bessel value:</p> <pre><code>./qte_cli.py --value --label \"J2(1.0)\"\n</code></pre> <p>Maclaurin (real coeffs, auto radius):</p> <pre><code>./qte_cli.py --nq 4 --mode terms --label \"Maclaurin[log(1+x); auto_r; real_coeffs]\"\n</code></pre> <p>Backends: - <code>auto</code> prefers mpmath; else series/Euler accel - <code>mp</code> forces mpmath.polylog - <code>series</code> uses internal series (|z|&lt;1) + Euler accel for z\u2208(-1,0)</p> <p>Caching:</p> <pre><code>./qte_cli.py --value --label \"Li(3,0.9)\" --cache\n</code></pre> <pre><code>import series_encoding as se\nse.qte_cache_clear()\n</code></pre>"},{"location":"dev/","title":"Dev notes","text":""},{"location":"dev/#smokebatch","title":"Smoke/batch","text":"<pre><code>python3 tests_qte.py\npython3 paper_batch.py\npython3 paper_multi.py\npython3 special_values_table.py\n</code></pre>"},{"location":"dev/#cache-api","title":"Cache API","text":"<pre><code>import series_encoding as se\nse.qte_cache_clear()\nprint('cache cleared')\n</code></pre>"},{"location":"dev/#env","title":"Env","text":"<ul> <li><code>QTE_POLYLOG_BACKEND={auto,mp,series}</code></li> <li><code>QTE_CACHE=1</code></li> </ul>"},{"location":"labels/","title":"Labels reference","text":"<p>QTE label grammar with quick examples for <code>qte_cli.py</code>.</p>"},{"location":"labels/#constants-series","title":"Constants / series","text":"<ul> <li><code>\u03c0</code>, <code>e</code>, <code>ln(2)</code>, <code>\u03b6(k)</code> for k=2..5, <code>\u03b3</code> (Euler\u2013Mascheroni), Catalan, <code>\u03c6</code>, <code>exp(\u03c0)</code>, <code>2^\u221a2</code>.</li> </ul> <p>Examples:</p> <pre><code>./qte_cli.py --value --label \"\u03b6(3)\"\n./qte_cli.py --nq 8 --mode terms --label \"\u03c0\"\n</code></pre>"},{"location":"labels/#polylog","title":"Polylog","text":"<ul> <li>Syntax: <code>Li(s,z)</code> / <code>polylog(s, z)</code> (complex <code>s,z</code> supported).</li> <li>Backends: <code>--backend {auto,series,mp}</code> or env <code>QTE_POLYLOG_BACKEND</code>.</li> <li>Principal branch used near the real axis.</li> </ul> <p>Examples:</p> <pre><code>QTE_POLYLOG_BACKEND=auto ./qte_cli.py --value --label \"polylog(2, 1.1)\"\n./qte_cli.py --value --label \"Li(3, 0.9)\" --cache\n</code></pre>"},{"location":"labels/#bessel","title":"Bessel","text":"<ul> <li>Cylindrical Bessel J_n: <code>J0</code>, <code>J1</code>, <code>J2</code>, \u2026</li> </ul> <p>Example:</p> <pre><code>./qte_cli.py --value --label \"J2(1.0)\"\n</code></pre>"},{"location":"labels/#maclaurin","title":"Maclaurin","text":"<ul> <li><code>Maclaurin[f(x); x=&lt;point&gt;; r=&lt;radius&gt;]</code> with helpers <code>auto_r</code>, <code>real_coeffs</code>.</li> </ul> <p>Examples:</p> <pre><code>./qte_cli.py --nq 4 --mode terms --label \"Maclaurin[log(1+x); auto_r; real_coeffs]\"\n./qte_cli.py --nq 8 --mode terms --label \"Maclaurin[exp(x^2); r=0.7]\"\n</code></pre>"},{"location":"labels/#transforms-qft","title":"Transforms (QFT)","text":"<ul> <li><code>QFT[f(x); N=&lt;pow2&gt;; a=&lt;start&gt;; b=&lt;end&gt;; ifft]</code> \u2014 sample on [a,b], IFFT to register.</li> </ul> <p>Example:</p> <pre><code>./qte_cli.py --nq 6 --mode terms --label \"QFT[sin(2*pi*x); N=64; a=0; b=1; ifft]\"\n</code></pre>"},{"location":"labels/#rail-mapping","title":"Rail mapping","text":"<ul> <li>Append <code>[rail]</code> to map plus/minus amplitudes to even/odd rails.</li> </ul> <p>Example:</p> <pre><code>./qte_cli.py --nq 6 --mode terms --label \"QFT[sin(2*pi*x); N=64; a=0; b=1; ifft][rail]\"\n</code></pre>"},{"location":"labels/#caching","title":"Caching","text":"<ul> <li>Enable with <code>--cache</code> or <code>QTE_CACHE=1</code>.</li> <li>Clear at runtime:</li> </ul> <pre><code>import series_encoding as se\nse.qte_cache_clear()\n</code></pre>"}]}