#!/usr/bin/env python3
from pathlib import Path
import argparse, json, datetime, subprocess

def _git_sha():
    try:
        out = subprocess.check_output(["git", "rev-parse", "--short", "HEAD"])
        return out.decode().strip()
    except Exception:
        return "unknown"

def write(path="docs/results/claims.md", eps="2^-20", fmin_chip="0.99", fmin_metro="0.90", extra=None):
    import os, sys
sys.path.insert(0, os.path.dirname(__file__))
try:
    from metrics_version import VERSION as METRICS_VERSION  # script context
except Exception:
    try:
        from tools.metrics_version import VERSION as METRICS_VERSION  # package context
    except Exception:
        METRICS_VERSION = "0.0.0"
    p = Path(path)
    p.parent.mkdir(parents=True, exist_ok=True)
    now = datetime.datetime.utcnow().isoformat() + "Z"
    meta = {
        "time_utc": now,
        "git_sha": _git_sha(),
        "metrics.version": METRICS_VERSION,
        "epsilon_target": eps,
        "F_min_on_chip": fmin_chip,
        "F_min_metro": fmin_metro,
    }
    if extra:
        meta.update(extra)
    lines = ["# Claims & Metrics Record", "", "**Provenance**"]
    for k,v in meta.items():
        lines.append(f"- {k}: {v}")
    lines += ["", "**Status**", "- IND harness: TODO", "- Nonce reuse ablation: TODO", ""]
    p.write_text("\n".join(lines) + "\n", encoding="utf-8")
    return meta

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--path", default="docs/results/claims.md")
    ap.add_argument("--eps", default="2^-20")
    ap.add_argument("--fmin_chip", default="0.99")
    ap.add_argument("--fmin_metro", default="0.90")
    args = ap.parse_args()
    meta = write(path=args.path, eps=args.eps, fmin_chip=args.fmin_chip, fmin_metro=args.fmin_metro)
    print(json.dumps(meta, indent=2))

if __name__ == "__main__":
    main()
